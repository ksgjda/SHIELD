/*
 * Copyright (c) 2016, Regents of the University of California
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * IOTAUTH_COPYRIGHT_VERSION_1
 */

package org.iot.auth.message;

import org.iot.auth.crypto.DistributionKey;
import org.iot.auth.crypto.SessionKey;
import org.iot.auth.crypto.SymmetricKeyCryptoSpec;
import org.iot.auth.exception.InvalidSymmetricKeyOperationException;
import org.iot.auth.exception.UseOfExpiredKeyException;
import org.iot.auth.io.Buffer;
import org.iot.auth.io.BufferedString;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * A class for a session key response message to an entity who requested session key(s).
 * <pre>
 * SessionKeyResp Format
 * {
 *      entityNonce:   /Buffer/,   (ENTITY_NONCE_SIZE)
 *      cryptoSpec:    /JSON/, (e.g., {cipher: 'AES-128-CBC', mac: 'SHA256'} stringified)
 *      sessionKeyList: /UInt32BE for length and List of SessionKey's/
 *      // TODO: who you're talking to? if req included keyId=?
 * } </pre>
 * @author Hokeun Kim
 */
public class SessionKeyRespMessage extends IoTSPMessage  {
    /**
     * Constructor for a session key response message with a distribution key encrypted by the entity's public key.
     * @param encryptedDistKey A distribution key encrypted by the entity's public key.
     * @param entityNonce A nonce (random number) generated by the entity.
     * @param cryptoSpec Cryptography specifications for the session keys in the response.
     * @param sessionKeyList Session keys to be sent to the requesting entity.
     */
    public SessionKeyRespMessage(Buffer encryptedDistKey, Buffer entityNonce, SymmetricKeyCryptoSpec cryptoSpec,
                                 List<SessionKey> sessionKeyList) {
        super(MessageType.SESSION_KEY_RESP_WITH_DIST_KEY);
        this.encryptedDistKey = encryptedDistKey;
        this.entityNonce = entityNonce;
        this.cryptoSpec = cryptoSpec;
        this.sessionKeyList = sessionKeyList;
    }

    /**
     * Constructor for a session key request message without a distribution key.
     * @param entityNonce A nonce (random number) generated by the entity.
     * @param cryptoSpec Cryptography specifications for the session keys in the response.
     * @param sessionKeyList Session keys to be sent to the requesting entity.
     */
    public SessionKeyRespMessage(Buffer entityNonce, SymmetricKeyCryptoSpec cryptoSpec,
                                 List<SessionKey> sessionKeyList) {
        super(MessageType.SESSION_KEY_RESP);
        encryptedDistKey = null;
        this.entityNonce = entityNonce;
        this.cryptoSpec = cryptoSpec;
        this.sessionKeyList = sessionKeyList;
    }

    /**
     * Serialize the session key response message and encrypt with the specified distribution key.
     * @param distKey A distribution key for encrypting the session key request message.
     * @return Buffer for serialized and encrypted message.
     * @throws UseOfExpiredKeyException If an expired key is used for encryption.
     * @throws InvalidSymmetricKeyOperationException If the symmetric key operation is invalid.
     */
    public Buffer serializeAndEncrypt(DistributionKey distKey) throws UseOfExpiredKeyException,
            InvalidSymmetricKeyOperationException
    {
        Buffer payload = new Buffer(entityNonce);
        String cryptoSpecString = cryptoSpec.toJSONObject().toString();
        logger.debug("cryptoSpecString: {}", cryptoSpecString);
        payload.concat(new BufferedString(cryptoSpecString).serialize());
        Buffer bufSessionKeyCount = new Buffer(4);
        bufSessionKeyCount.putInt(sessionKeyList.size(), 0);
        payload.concat(bufSessionKeyCount);

        for (SessionKey sessionKey: sessionKeyList) {
            payload.concat(sessionKey.serialize());
        }

        payload = distKey.encryptAuthenticate(payload);

        if (type == MessageType.SESSION_KEY_RESP_WITH_DIST_KEY) {
            Buffer newPayload = new Buffer(encryptedDistKey);
            newPayload.concat(payload);
            payload = newPayload;
        }
        this.payload = payload;
        return super.serialize();
    }

    private Buffer encryptedDistKey;
    private Buffer entityNonce;
    private SymmetricKeyCryptoSpec cryptoSpec;
    private List<SessionKey> sessionKeyList;
    private static final Logger logger = LoggerFactory.getLogger(SessionKeyReqMessage.class);
}
